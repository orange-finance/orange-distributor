{
  "address": "0xEB960A1cb34F03035813E801638245B67A1A0f5B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEpoch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "distributionStartBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributionEndBlock",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct OrangeDistributor.MerkleRootData",
          "name": "_newMerkleRoot",
          "type": "tuple"
        }
      ],
      "name": "MerkleRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RewardPulled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "SetGauge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nextEpochToPull",
          "type": "uint256"
        }
      ],
      "name": "SkipPulls",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "canPullNext",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IGaugeController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gauges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGaugeController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nextStrykeEpochToPull",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "pullNext",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "setGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nextEpochToPull",
          "type": "uint256"
        }
      ],
      "name": "skipPulls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syk",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "distributionStartBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributionEndBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrangeDistributor.MerkleRootData",
          "name": "_merkleData",
          "type": "tuple"
        }
      ],
      "name": "updateMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xSyk",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9ad6d3568fc6c722c44eda63c5bc8b3c21c0a8f0f463cae976faf2d41f1ac1b",
  "receipt": {
    "to": null,
    "from": "0x8f1450F70a67cAd8e23c9A082A86F9A5e3a53853",
    "contractAddress": "0xEB960A1cb34F03035813E801638245B67A1A0f5B",
    "transactionIndex": 1,
    "gasUsed": "3944193",
    "logsBloom": "0x
    "blockHash": "0x5490b277de915cab9b5544e08cc561627f082b96cf6ddc5f6a00963076b21886",
    "transactionHash": "0xb9ad6d3568fc6c722c44eda63c5bc8b3c21c0a8f0f463cae976faf2d41f1ac1b",
    "logs": [],
    "blockNumber": 264293484,
    "cumulativeGasUsed": "3944193",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "df5de898fce2684558d17b0456c67d19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"distributionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionEndBlock\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OrangeDistributor.MerkleRootData\",\"name\":\"_newMerkleRoot\",\"type\":\"tuple\"}],\"name\":\"MerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"SetGauge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nextEpochToPull\",\"type\":\"uint256\"}],\"name\":\"SkipPulls\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"canPullNext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IGaugeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGaugeController\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextStrykeEpochToPull\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"pullNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"setGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextEpochToPull\",\"type\":\"uint256\"}],\"name\":\"skipPulls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syk\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"distributionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionEndBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct OrangeDistributor.MerkleRootData\",\"name\":\"_merkleData\",\"type\":\"tuple\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xSyk\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OrangeDistributor.sol\":\"OrangeDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\"},\"contracts/OrangeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.27;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IGauge} from \\\"./interfaces/IGauge.sol\\\";\\nimport {IGaugeController} from \\\"./interfaces/IGaugeController.sol\\\";\\nimport {SYKPuller} from \\\"./SYKPuller.sol\\\";\\nimport {IXStrykeToken} from \\\"./interfaces/IXStrykeToken.sol\\\";\\n\\ncontract OrangeDistributor is SYKPuller {\\n    using SafeERC20 for IERC20;\\n\\n    struct MerkleRootData {\\n        bytes32 root;\\n        uint distributionStartBlock;\\n        uint distributionEndBlock;\\n    }\\n\\n    event MerkleRootUpdated(address indexed _vault, address indexed _token, MerkleRootData _newMerkleRoot);\\n    event RewardClaimed(address indexed _user, address indexed _vault, address indexed token, uint _amount);\\n\\n    error InvalidProof();\\n\\n    // Mapping from vault to token to merkle root\\n    mapping (address => mapping (address => MerkleRootData)) merkleRootData;\\n\\n    // Mapping from vault to depositor to token to amount of token claimed\\n    mapping (address => mapping (address => mapping (address => uint))) claimed;\\n\\n    // Mapping from vault to token to total amount of token rewarded\\n    mapping (address => mapping (address => uint)) totalReward;\\n\\n    constructor() {}\\n\\n    function initialize(IGaugeController _controller) external initializer {\\n        __SYKPuller_init(_controller);\\n    }\\n\\n    function claim(address _vault, address _token, uint256 _amount, bytes32[] calldata merkleProof) external {\\n        claimed[_vault][_token][msg.sender]+=_amount;\\n        \\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, claimed[_vault][_token][msg.sender]));\\n        if (!MerkleProof.verifyCalldata(merkleProof, merkleRootData[_vault][_token].root, leaf)) revert InvalidProof();\\n\\n        if (_token==syk) {\\n            IERC20(syk).safeIncreaseAllowance(xSyk, _amount/2);\\n            IXStrykeToken(xSyk).convert(_amount / 2, msg.sender);\\n            IERC20(_token).safeTransfer(msg.sender, _amount/2);\\n        } else {\\n            IERC20(_token).safeTransfer(msg.sender, _amount);\\n        }\\n\\n        emit RewardClaimed(msg.sender, _vault, _token, _amount);\\n    }\\n\\n    function updateMerkleRoot(address _vault, address _token, MerkleRootData memory _merkleData) external onlyOwner {\\n        merkleRootData[_vault][_token] = _merkleData;\\n        emit MerkleRootUpdated(_vault, _token, _merkleData);\\n    }\\n}\\n\",\"keccak256\":\"0x53acc810a2386f8abbd1d8aea51c898696a6aa04ae8814b03b305fc1c79ea8e4\",\"license\":\"UNLICENSED\"},\"contracts/SYKPuller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.27;\\r\\n\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {IGauge} from \\\"./interfaces/IGauge.sol\\\";\\r\\nimport {IGaugeController} from \\\"./interfaces/IGaugeController.sol\\\";\\r\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nabstract contract SYKPuller is OwnableUpgradeable {\\r\\n\\r\\n    event SetGauge(address indexed _vault, address indexed _gauge);\\r\\n    event RewardPulled(address indexed _vault, uint _amount);\\r\\n    event SkipPulls(address indexed _vault, uint _nextEpochToPull);\\r\\n\\r\\n    error InvalidEpoch();\\r\\n\\r\\n    mapping (address => uint) public nextStrykeEpochToPull;\\r\\n    mapping (address => mapping (uint => uint)) public epochRewards;\\r\\n    mapping (address => address) public gauges;\\r\\n    IGaugeController public controller;\\r\\n    address public syk;\\r\\n    address public xSyk;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function __SYKPuller_init (IGaugeController _controller) internal initializer {\\r\\n        __Ownable_init();\\r\\n        controller = _controller;\\r\\n        syk = controller.syk();\\r\\n        xSyk = controller.xSyk();\\r\\n    }\\r\\n\\r\\n    function canPullNext(address _vault) external view returns (bool) {\\r\\n        return controller.epochFinalized(nextStrykeEpochToPull[_vault]);\\r\\n    }\\r\\n\\r\\n    function setGauge(address _vault, address _gauge) external onlyOwner {\\r\\n        gauges[_vault] = _gauge;\\r\\n        emit SetGauge(_vault, _gauge);\\r\\n    }\\r\\n\\r\\n    function skipPulls(address _vault, uint _nextEpochToPull) external onlyOwner {\\r\\n        nextStrykeEpochToPull[_vault] = _nextEpochToPull;\\r\\n        emit SkipPulls(_vault, _nextEpochToPull);\\r\\n    }\\r\\n\\r\\n    function pullNext(address _vault) external onlyOwner {\\r\\n        uint balanceBefore = ERC20(syk).balanceOf(address(this));\\r\\n        IGauge(gauges[_vault]).pull(nextStrykeEpochToPull[_vault]);\\r\\n        uint balanceAfter = ERC20(syk).balanceOf(address(this));\\r\\n        epochRewards[_vault][nextStrykeEpochToPull[_vault]] = balanceAfter - balanceBefore;\\r\\n        nextStrykeEpochToPull[_vault]+=1;\\r\\n        emit RewardPulled(_vault, balanceAfter - balanceBefore);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe9d12faee0643a85225286d88a8588a6e866a00b2ffc3e34d929040ccf0709b5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.27;\\r\\n\\r\\ninterface IGauge {\\r\\n    function pull(uint _epoch) external;\\r\\n}\",\"keccak256\":\"0x88b237fb6cf4e693bf548509c46496b2883e4f3937b20ae86b59425145bd8531\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.27;\\r\\n\\r\\n/// @dev Struct to hold information about each gauge.\\r\\nstruct GaugeInfo {\\r\\n    uint256 chainId;\\r\\n    uint256 baseReward;\\r\\n    uint8 gaugeType;\\r\\n    address gaugeAddress;\\r\\n}\\r\\n\\r\\n/// @dev Struct for the parameters to pass to vote().\\r\\nstruct VoteParams {\\r\\n    uint256 power;\\r\\n    uint256 totalPower;\\r\\n    uint256 epoch;\\r\\n    bytes32 gaugeId; // keccak256(abi.encode(chainId, gauge address))\\r\\n    bytes32 accountId; // keccak256(abi.encode(chainId, account address))\\r\\n}\\r\\n\\r\\n/// @dev Struct for the parameters to pass to pull().\\r\\nstruct PullParams {\\r\\n    uint256 epoch;\\r\\n    bytes32 gaugeId;\\r\\n    address gaugeAddress;\\r\\n}\\r\\n\\r\\ninterface IGaugeController {\\r\\n    /// @dev Error thrown when trying to pull rewards for a gauge in the current epoch.\\r\\n    error GaugeController_EpochActive();\\r\\n\\r\\n    /// @dev Error thrown when the total reward available is insufficient to cover the base rewards.\\r\\n    error GaugeController_NotEnoughRewardAvailable();\\r\\n\\r\\n    /// @dev Error thrown when an account does not have enough power to vote as requested.\\r\\n    error GaugeController_NotEnoughPowerAvailable();\\r\\n\\r\\n    /// @dev Error thrown when an invalid gauge address is provided.\\r\\n    error GaugeController_InvalidGauge();\\r\\n\\r\\n    /// @dev Error thrown when an action is attempted on a gauge that does not exist.\\r\\n    error GaugeController_GaugeNotFound();\\r\\n\\r\\n    /// @dev Error thrown when the msg.sender for pull() is not a gauge or a approved bridge adapter.\\r\\n    error GaugeController_NotGauge();\\r\\n\\r\\n    /// @dev Error thrown when a gauge tries to pull rewards for an epoch which already had its rewards pulled.\\r\\n    error GaugeController_RewardAlreadyPulled();\\r\\n\\r\\n    error GaugeController_IncorrectEpoch();\\r\\n\\r\\n    error GaugeController_EpochNotFinalized();\\r\\n\\r\\n    /// @notice Emitted when a vote is cast.\\r\\n    /// @param voteParams The parameters for the vote.\\r\\n    event Voted(VoteParams voteParams);\\r\\n\\r\\n    /// @notice Emitted when a gauge pulls its reward for the epoch.\\r\\n    /// @param pullParams The parameters for the pull.\\r\\n    /// @param reward Amount of reward.\\r\\n    event RewardPulled(PullParams pullParams, uint256 reward);\\r\\n\\r\\n    /// @notice Emitted when a bridge adapter's status is updated.\\r\\n    /// @param bridgeAdapter The address of the bridge adapter.\\r\\n    /// @param add True if the adapter is added, false if removed.\\r\\n    event BridgeAdapterUpdated(address bridgeAdapter, bool add);\\r\\n\\r\\n    /// @notice Emitted when the total rewards per epoch is changed\\r\\n    /// @param totalRewardsPerEpoch uint256 amount for total reward per epoch\\r\\n    event SetTotalRewardsPerEpoch(uint256 totalRewardsPerEpoch);\\r\\n\\r\\n    /// @notice Emitted when a new gauge is added\\r\\n    /// @param gaugeInfo The GaugeInfo struct\\r\\n    event GaugeAdded(GaugeInfo gaugeInfo);\\r\\n\\r\\n    /// @notice Emitted when a gauge is removed\\r\\n    /// @param gaugeInfo The GaugeInfo struct\\r\\n    event GaugeRemoved(GaugeInfo gaugeInfo);\\r\\n\\r\\n    function syk() external view returns (address);\\r\\n    function xSyk() external view returns (address);\\r\\n\\r\\n    function genesis() external view returns (uint256);\\r\\n\\r\\n    function epochFinalized(uint _epoch) external view returns (bool);\\r\\n\\r\\n    /// @notice Calculates the current epoch based on the genesis time and epoch length.\\r\\n    /// @return _epoch current epoch number.\\r\\n    function epoch() external view returns (uint256 _epoch);\\r\\n\\r\\n    /// @notice Computes the rewards for a gauge based on votes in a given epoch.\\r\\n    /// @param _id The unique identifier of the gauge.\\r\\n    /// @param _epoch The epoch for which to compute rewards.\\r\\n    /// @return reward The amount of reward computed.\\r\\n    function computeRewards(bytes32 _id, uint256 _epoch) external view returns (uint256 reward);\\r\\n\\r\\n    /// @notice Allows an account to vote on a gauge with its voting power.\\r\\n    /// @param _voteParams Parameters including the gauge ID, power to allocate, and total power.\\r\\n    function vote(VoteParams calldata _voteParams) external;\\r\\n\\r\\n    /// @notice Pulls computed rewards for a gauge for a given epoch.\\r\\n    /// @param _pullParams Parameters including the gauge ID and the epoch.\\r\\n    /// @return reward The amount of reward pulled.\\r\\n    function pull(PullParams calldata _pullParams) external returns (uint256 reward);\\r\\n}\",\"keccak256\":\"0x7a8e2c83c1b6d5421325bfd5f57470e19ba1dab1702dc275ce2254c76c62c690\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IXStrykeToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.27;\\r\\n\\r\\nenum VestStatus {\\r\\n    INACTIVE,\\r\\n    ACTIVE,\\r\\n    REDEEMED,\\r\\n    CANCELLED\\r\\n}\\r\\n\\r\\nstruct VestData {\\r\\n    address account; // The account participating in the vesting (Owner of the vest).\\r\\n    uint256 sykAmount; // SYK amount to be received upon vesting completion.\\r\\n    uint256 xSykAmount; // xSYK amount being redeemed for SYK.\\r\\n    uint256 maturity; // Timestamp when the vesting period ends.\\r\\n    VestStatus status; // Current status of the vesting process.\\r\\n}\\r\\n\\r\\nstruct RedeemSettings {\\r\\n    uint256 minRatio; // Minimum conversion ratio from xSYK to SYK.\\r\\n    uint256 maxRatio; // Maximum conversion ratio from xSYK to SYK.\\r\\n    uint256 minDuration; // Minimum duration for vesting.\\r\\n    uint256 maxDuration; // Maximum duration for vesting.\\r\\n}\\r\\n\\r\\ninterface IXStrykeToken {\\r\\n    /// @dev Emitted when incorrect ratio values are provided for redeem settings.\\r\\n    error XStrykeToken_WrongRatioValues();\\r\\n\\r\\n    /// @dev Emitted when incorrect duration values are provided for redeem settings.\\r\\n    error XStrykeToken_WrongDurationValues();\\r\\n\\r\\n    /// @dev Emitted when the provided amount for a transaction cannot be zero.\\r\\n    error XStrykeToken_AmountZero();\\r\\n\\r\\n    /// @dev Emitted when the provided duration for vesting is below the minimum allowed.\\r\\n    error XStrykeToken_DurationTooLow();\\r\\n\\r\\n    /// @dev Emitted when the provided address for whitelist is the xSYK address itself.\\r\\n    error XStrykeToken_InvalidWhitelistAddress();\\r\\n\\r\\n    /// @dev Emitted when someone tries to redeem before their vesting is completed.\\r\\n    error XStrykeToken_VestingHasNotMatured();\\r\\n\\r\\n    /// @dev Emitted when someone tries to redeem a non-active vesting.\\r\\n    error XStrykeToken_VestingNotActive();\\r\\n\\r\\n    /// @dev Emitted when a transfer of xSYK is happening between non-whitelisted accounts.\\r\\n    error XStrykeToken_TransferNotAllowed();\\r\\n\\r\\n    /// @dev Emitted when msg.sender is not the account owner of the vest\\r\\n    error XStrykeToken_SenderNotOwner();\\r\\n\\r\\n    /// @notice  Emitted when the excess receiver is updated.\\r\\n    /// @param excessReceiver The new excess receiver address\\r\\n    event ExcessReceiverUpdated(address excessReceiver);\\r\\n\\r\\n    /// @notice Emitted when redeem settings are updated.\\r\\n    /// @param redeemSettings The new redeem settings applied.\\r\\n    event RedeemSettingsUpdated(RedeemSettings redeemSettings);\\r\\n\\r\\n    /// @notice Emitted when an account's whitelist status is updated.\\r\\n    /// @param account The account whose whitelist status is updated.\\r\\n    /// @param add Boolean indicating whether the account was added to (true) or removed from (false) the whitelist.\\r\\n    event WhitelistUpdated(address account, bool add);\\r\\n\\r\\n    /// @notice Emitted when SYK tokens are converted to xSYK tokens.\\r\\n    /// @param from The address of the account converting SYK to xSYK.\\r\\n    /// @param to The address of the account receiving the xSYK tokens.\\r\\n    /// @param amount The amount of SYK tokens being converted.\\r\\n    event Converted(address indexed from, address to, uint256 amount);\\r\\n\\r\\n    /// @notice Emitted when xSYK tokens are vested for SYK redemption.\\r\\n    /// @param account The account initiating the vest.\\r\\n    /// @param xSykAmount The amount of xSYK tokens vested.\\r\\n    /// @param sykAmount The amount of SYK tokens to be received upon vest completion.\\r\\n    /// @param duration The duration of the vest in seconds.\\r\\n    /// @param vestIndex The vest index\\r\\n    event Vested(address indexed account, uint256 xSykAmount, uint256 sykAmount, uint256 duration, uint256 vestIndex);\\r\\n\\r\\n    /// @notice Emitted when vested xSYK tokens are redeemed for SYK.\\r\\n    /// @param account The account redeeming the vested xSYK.\\r\\n    /// @param xSykAmount The amount of xSYK tokens redeemed.\\r\\n    /// @param sykAmount The amount of SYK tokens received in exchange.\\r\\n    event Redeemed(address indexed account, uint256 xSykAmount, uint256 sykAmount);\\r\\n\\r\\n    /// @notice Emitted when a vesting operation is cancelled.\\r\\n    /// @param account The account cancelling the vest.\\r\\n    /// @param vestIndex The index of the vesting operation being cancelled.\\r\\n    /// @param xSykAmount The amount of xSYK associated with the cancelled vest.\\r\\n    event VestCancelled(address indexed account, uint256 vestIndex, uint256 xSykAmount);\\r\\n\\r\\n    function authority() external view returns (address);\\r\\n\\r\\n    function setAuthority(address newAddress) external;\\r\\n\\r\\n    function updateContractWhitelist(address _contract, bool _add) external;\\r\\n\\r\\n    /// @notice Converts SYK to xSYK\\r\\n    /// @param _amount amount of SYK to convert to xSYK\\r\\n    /// @param _to address of the receiving account\\r\\n    function convert(uint256 _amount, address _to) external;\\r\\n\\r\\n    /// @notice Vest xSYK to get back SYK\\r\\n    /// @param _amount amount of xSYK to vest for getting back SYK\\r\\n    /// @param _duration duration of the vesting\\r\\n    function vest(uint256 _amount, uint256 _duration) external;\\r\\n\\r\\n    /// @notice Redeem vested xSYK\\r\\n    /// @param _vestIndex Index of the vest\\r\\n    function redeem(uint256 _vestIndex) external;\\r\\n\\r\\n    /// @notice Cancel a redeem vested xSYK\\r\\n    /// @param _vestIndex Index of the vest\\r\\n    function cancelVest(uint256 _vestIndex) external;\\r\\n}\",\"keccak256\":\"0xe810a9485560910e068caa5e1d4c35ef7f68f0549dec5b95301f97faa35c5bb2\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50612d178061001f6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063b9a09fd511610097578063f2fde38b11610066578063f2fde38b14610285578063f5f49296146102a1578063f77c4791146102d1578063fabed412146102ef57610100565b8063b9a09fd5146101ff578063c4d66de81461022f578063cf24eb241461024b578063edcc009d1461026957610100565b80634c55b7de116100d35780634c55b7de1461019d578063715018a6146101bb5780638da5cb5b146101c5578063a43ca371146101e357610100565b806302800ebd146101055780631fa8d0ba14610135578063237e6d6414610165578063383a0d5314610181575b600080fd5b61011f600480360381019061011a919061223f565b61030b565b60405161012c919061228e565b60405180910390f35b61014f600480360381019061014a91906122a9565b610330565b60405161015c91906122f1565b60405180910390f35b61017f600480360381019061017a919061230c565b610414565b005b61019b600480360381019061019691906122a9565b61056c565b005b6101a5610984565b6040516101b2919061235b565b60405180910390f35b6101c36109aa565b005b6101cd610ae7565b6040516101da919061235b565b60405180910390f35b6101fd60048036038101906101f8919061223f565b610b11565b005b610219600480360381019061021491906122a9565b610c23565b604051610226919061235b565b60405180910390f35b610249600480360381019061024491906123b4565b610c56565b005b610253610d39565b604051610260919061235b565b60405180910390f35b610283600480360381019061027e919061250c565b610d5f565b005b61029f600480360381019061029a91906122a9565b610ee3565b005b6102bb60048036038101906102b691906122a9565b61108e565b6040516102c8919061228e565b60405180910390f35b6102d96110a6565b6040516102e691906125be565b60405180910390f35b6103096004803603810190610304919061263e565b6110cc565b005b6066602052816000526040600020602052806000526040600020600091509150505481565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cafef3b5606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518263ffffffff1660e01b81526004016103cc919061228e565b602060405180830381865afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d91906126f2565b9050919050565b61041c61159a565b73ffffffffffffffffffffffffffffffffffffffff1661043a610ae7565b73ffffffffffffffffffffffffffffffffffffffff1614610490576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104879061277c565b60405180910390fd5b80606760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fb980a40e5b6e992493967c8460db4d84575ad3246c3a17141fa7756ae4dd718060405160405180910390a35050565b61057461159a565b73ffffffffffffffffffffffffffffffffffffffff16610592610ae7565b73ffffffffffffffffffffffffffffffffffffffff16146105e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105df9061277c565b60405180910390fd5b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610645919061235b565b602060405180830381865afa158015610662573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068691906127b1565b9050606760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634d0392a8606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518263ffffffff1660e01b815260040161075f919061228e565b600060405180830381600087803b15801561077957600080fd5b505af115801561078d573d6000803e3d6000fd5b505050506000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107ee919061235b565b602060405180830381865afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f91906127b1565b9050818161083d919061280d565b606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000606560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001908152602001600020819055506001606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109209190612841565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167e703dec1352f06629844a1575eb327cd01fd616d236d2394468fa6f410b3315838361096a919061280d565b604051610977919061228e565b60405180910390a2505050565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109b261159a565b73ffffffffffffffffffffffffffffffffffffffff166109d0610ae7565b73ffffffffffffffffffffffffffffffffffffffff1614610a26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1d9061277c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b1961159a565b73ffffffffffffffffffffffffffffffffffffffff16610b37610ae7565b73ffffffffffffffffffffffffffffffffffffffff1614610b8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b849061277c565b60405180910390fd5b80606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fe86ed049b5d71416d6cb2ba84637b8c149c2c5c731523d36388511500c7152b182604051610c17919061228e565b60405180910390a25050565b60676020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff1680610c7c575060008054906101000a900460ff16155b610cbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb2906128e7565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d0b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d14826115a2565b8015610d355760008060016101000a81548160ff0219169083151502179055505b5050565b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d6761159a565b73ffffffffffffffffffffffffffffffffffffffff16610d85610ae7565b73ffffffffffffffffffffffffffffffffffffffff1614610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd29061277c565b60405180910390fd5b80606b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f3666cbc2f443a3d7b2e9eff02792c76fb2c82360f97dc5afd92b8fe46745b49083604051610ed69190612967565b60405180910390a3505050565b610eeb61159a565b73ffffffffffffffffffffffffffffffffffffffff16610f09610ae7565b73ffffffffffffffffffffffffffffffffffffffff1614610f5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f569061277c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc5906129f4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60656020528060005260406000206000915090505481565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b82606c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111959190612841565b92505081905550600033606c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405160200161126a929190612a7d565b60405160208183030381529060405280519060200120905061130d8383606b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015484611867565b611343576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036114ea57611413606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002866113cb9190612ad8565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118809092919063ffffffff16565b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a2ee25260028661145e9190612ad8565b336040518363ffffffff1660e01b815260040161147c929190612b09565b600060405180830381600087803b15801561149657600080fd5b505af11580156114aa573d6000803e3d6000fd5b505050506114e5336002866114bf9190612ad8565b8773ffffffffffffffffffffffffffffffffffffffff1661191c9092919063ffffffff16565b611516565b61151533858773ffffffffffffffffffffffffffffffffffffffff1661191c9092919063ffffffff16565b5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2422cac5e23c46c890fdcf42d0c64757409df6832174df639337558f09d99c688760405161158a919061228e565b60405180910390a4505050505050565b600033905090565b600060019054906101000a900460ff16806115c8575060008054906101000a900460ff16155b611607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fe906128e7565b60405180910390fd5b60008060019054906101000a900460ff161590508015611657576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61165f61199b565b81606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634c55b7de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561170d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117319190612b47565b606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf24eb246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118029190612b47565b606a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156118635760008060016101000a81548160ff0219169083151502179055505b5050565b600082611875868685611a84565b149050949350505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016118bd929190612b74565b602060405180830381865afa1580156118da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fe91906127b1565b9050611916848484846119119190612841565b611ad6565b50505050565b611996838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161194f929190612b9d565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611be5565b505050565b600060019054906101000a900460ff16806119c1575060008054906101000a900460ff16155b611a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f7906128e7565b60405180910390fd5b60008060019054906101000a900460ff161590508015611a50576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611a58611c7c565b611a60611d55565b8015611a815760008060016101000a81548160ff0219169083151502179055505b50565b60008082905060005b85859050811015611aca57611abb82878784818110611aaf57611aae612bc6565b5b90506020020135611ed7565b91508080600101915050611a8d565b50809150509392505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b38484604051602401611b07929190612b9d565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050611b558482611f02565b611bdf57611bd4848573ffffffffffffffffffffffffffffffffffffffff1663095ea7b3866000604051602401611b8d929190612c30565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611be5565b611bde8482611be5565b5b50505050565b6000611c10828473ffffffffffffffffffffffffffffffffffffffff16611fc990919063ffffffff16565b90506000815114158015611c35575080806020019051810190611c3391906126f2565b155b15611c7757826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401611c6e919061235b565b60405180910390fd5b505050565b600060019054906101000a900460ff1680611ca2575060008054906101000a900460ff16155b611ce1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd8906128e7565b60405180910390fd5b60008060019054906101000a900460ff161590508015611d31576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015611d525760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611d7b575060008054906101000a900460ff16155b611dba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db1906128e7565b60405180910390fd5b60008060019054906101000a900460ff161590508015611e0a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000611e1461159a565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015611ed45760008060016101000a81548160ff0219169083151502179055505b50565b6000818310611eef57611eea8284611fdf565b611efa565b611ef98383611fdf565b5b905092915050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611f2c9190612cca565b6000604051808303816000865af19150503d8060008114611f69576040519150601f19603f3d011682016040523d82523d6000602084013e611f6e565b606091505b5091509150818015611f9c5750600081511480611f9b575080806020019051810190611f9a91906126f2565b5b5b8015611fbf575060008573ffffffffffffffffffffffffffffffffffffffff163b115b9250505092915050565b6060611fd783836000611ff6565b905092915050565b600082600052816020526040600020905092915050565b60608147101561203d57306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401612034919061235b565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516120669190612cca565b60006040518083038185875af1925050503d80600081146120a3576040519150601f19603f3d011682016040523d82523d6000602084013e6120a8565b606091505b50915091506120b88683836120c3565b925050509392505050565b6060826120d8576120d382612152565b61214a565b60008251148015612100575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561214257836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401612139919061235b565b60405180910390fd5b81905061214b565b5b9392505050565b6000815111156121655780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121d6826121ab565b9050919050565b6121e6816121cb565b81146121f157600080fd5b50565b600081359050612203816121dd565b92915050565b6000819050919050565b61221c81612209565b811461222757600080fd5b50565b60008135905061223981612213565b92915050565b60008060408385031215612256576122556121a1565b5b6000612264858286016121f4565b92505060206122758582860161222a565b9150509250929050565b61228881612209565b82525050565b60006020820190506122a3600083018461227f565b92915050565b6000602082840312156122bf576122be6121a1565b5b60006122cd848285016121f4565b91505092915050565b60008115159050919050565b6122eb816122d6565b82525050565b600060208201905061230660008301846122e2565b92915050565b60008060408385031215612323576123226121a1565b5b6000612331858286016121f4565b9250506020612342858286016121f4565b9150509250929050565b612355816121cb565b82525050565b6000602082019050612370600083018461234c565b92915050565b6000612381826121cb565b9050919050565b61239181612376565b811461239c57600080fd5b50565b6000813590506123ae81612388565b92915050565b6000602082840312156123ca576123c96121a1565b5b60006123d88482850161239f565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61242f826123e6565b810181811067ffffffffffffffff8211171561244e5761244d6123f7565b5b80604052505050565b6000612461612197565b905061246d8282612426565b919050565b6000819050919050565b61248581612472565b811461249057600080fd5b50565b6000813590506124a28161247c565b92915050565b6000606082840312156124be576124bd6123e1565b5b6124c86060612457565b905060006124d884828501612493565b60008301525060206124ec8482850161222a565b60208301525060406125008482850161222a565b60408301525092915050565b600080600060a08486031215612525576125246121a1565b5b6000612533868287016121f4565b9350506020612544868287016121f4565b9250506040612555868287016124a8565b9150509250925092565b6000819050919050565b600061258461257f61257a846121ab565b61255f565b6121ab565b9050919050565b600061259682612569565b9050919050565b60006125a88261258b565b9050919050565b6125b88161259d565b82525050565b60006020820190506125d360008301846125af565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126125fe576125fd6125d9565b5b8235905067ffffffffffffffff81111561261b5761261a6125de565b5b602083019150836020820283011115612637576126366125e3565b5b9250929050565b60008060008060006080868803121561265a576126596121a1565b5b6000612668888289016121f4565b9550506020612679888289016121f4565b945050604061268a8882890161222a565b935050606086013567ffffffffffffffff8111156126ab576126aa6121a6565b5b6126b7888289016125e8565b92509250509295509295909350565b6126cf816122d6565b81146126da57600080fd5b50565b6000815190506126ec816126c6565b92915050565b600060208284031215612708576127076121a1565b5b6000612716848285016126dd565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061276660208361271f565b915061277182612730565b602082019050919050565b6000602082019050818103600083015261279581612759565b9050919050565b6000815190506127ab81612213565b92915050565b6000602082840312156127c7576127c66121a1565b5b60006127d58482850161279c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061281882612209565b915061282383612209565b925082820390508181111561283b5761283a6127de565b5b92915050565b600061284c82612209565b915061285783612209565b925082820190508082111561286f5761286e6127de565b5b92915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006128d1602e8361271f565b91506128dc82612875565b604082019050919050565b60006020820190508181036000830152612900816128c4565b9050919050565b61291081612472565b82525050565b61291f81612209565b82525050565b60608201600082015161293b6000850182612907565b50602082015161294e6020850182612916565b5060408201516129616040850182612916565b50505050565b600060608201905061297c6000830184612925565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006129de60268361271f565b91506129e982612982565b604082019050919050565b60006020820190508181036000830152612a0d816129d1565b9050919050565b60008160601b9050919050565b6000612a2c82612a14565b9050919050565b6000612a3e82612a21565b9050919050565b612a56612a51826121cb565b612a33565b82525050565b6000819050919050565b612a77612a7282612209565b612a5c565b82525050565b6000612a898285612a45565b601482019150612a998284612a66565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ae382612209565b9150612aee83612209565b925082612afe57612afd612aa9565b5b828204905092915050565b6000604082019050612b1e600083018561227f565b612b2b602083018461234c565b9392505050565b600081519050612b41816121dd565b92915050565b600060208284031215612b5d57612b5c6121a1565b5b6000612b6b84828501612b32565b91505092915050565b6000604082019050612b89600083018561234c565b612b96602083018461234c565b9392505050565b6000604082019050612bb2600083018561234c565b612bbf602083018461227f565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6000612c1a612c15612c1084612bf5565b61255f565b612209565b9050919050565b612c2a81612bff565b82525050565b6000604082019050612c45600083018561234c565b612c526020830184612c21565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015612c8d578082015181840152602081019050612c72565b60008484015250505050565b6000612ca482612c59565b612cae8185612c64565b9350612cbe818560208601612c6f565b80840191505092915050565b6000612cd68284612c99565b91508190509291505056fea2646970667358221220163a0d8d817db97c99f90a39d1543aa1f45fea5ad23be7c68085fb934b65abc864736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063b9a09fd511610097578063f2fde38b11610066578063f2fde38b14610285578063f5f49296146102a1578063f77c4791146102d1578063fabed412146102ef57610100565b8063b9a09fd5146101ff578063c4d66de81461022f578063cf24eb241461024b578063edcc009d1461026957610100565b80634c55b7de116100d35780634c55b7de1461019d578063715018a6146101bb5780638da5cb5b146101c5578063a43ca371146101e357610100565b806302800ebd146101055780631fa8d0ba14610135578063237e6d6414610165578063383a0d5314610181575b600080fd5b61011f600480360381019061011a919061223f565b61030b565b60405161012c919061228e565b60405180910390f35b61014f600480360381019061014a91906122a9565b610330565b60405161015c91906122f1565b60405180910390f35b61017f600480360381019061017a919061230c565b610414565b005b61019b600480360381019061019691906122a9565b61056c565b005b6101a5610984565b6040516101b2919061235b565b60405180910390f35b6101c36109aa565b005b6101cd610ae7565b6040516101da919061235b565b60405180910390f35b6101fd60048036038101906101f8919061223f565b610b11565b005b610219600480360381019061021491906122a9565b610c23565b604051610226919061235b565b60405180910390f35b610249600480360381019061024491906123b4565b610c56565b005b610253610d39565b604051610260919061235b565b60405180910390f35b610283600480360381019061027e919061250c565b610d5f565b005b61029f600480360381019061029a91906122a9565b610ee3565b005b6102bb60048036038101906102b691906122a9565b61108e565b6040516102c8919061228e565b60405180910390f35b6102d96110a6565b6040516102e691906125be565b60405180910390f35b6103096004803603810190610304919061263e565b6110cc565b005b6066602052816000526040600020602052806000526040600020600091509150505481565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cafef3b5606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518263ffffffff1660e01b81526004016103cc919061228e565b602060405180830381865afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d91906126f2565b9050919050565b61041c61159a565b73ffffffffffffffffffffffffffffffffffffffff1661043a610ae7565b73ffffffffffffffffffffffffffffffffffffffff1614610490576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104879061277c565b60405180910390fd5b80606760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fb980a40e5b6e992493967c8460db4d84575ad3246c3a17141fa7756ae4dd718060405160405180910390a35050565b61057461159a565b73ffffffffffffffffffffffffffffffffffffffff16610592610ae7565b73ffffffffffffffffffffffffffffffffffffffff16146105e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105df9061277c565b60405180910390fd5b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610645919061235b565b602060405180830381865afa158015610662573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068691906127b1565b9050606760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634d0392a8606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518263ffffffff1660e01b815260040161075f919061228e565b600060405180830381600087803b15801561077957600080fd5b505af115801561078d573d6000803e3d6000fd5b505050506000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107ee919061235b565b602060405180830381865afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f91906127b1565b9050818161083d919061280d565b606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000606560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001908152602001600020819055506001606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109209190612841565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167e703dec1352f06629844a1575eb327cd01fd616d236d2394468fa6f410b3315838361096a919061280d565b604051610977919061228e565b60405180910390a2505050565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109b261159a565b73ffffffffffffffffffffffffffffffffffffffff166109d0610ae7565b73ffffffffffffffffffffffffffffffffffffffff1614610a26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1d9061277c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b1961159a565b73ffffffffffffffffffffffffffffffffffffffff16610b37610ae7565b73ffffffffffffffffffffffffffffffffffffffff1614610b8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b849061277c565b60405180910390fd5b80606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fe86ed049b5d71416d6cb2ba84637b8c149c2c5c731523d36388511500c7152b182604051610c17919061228e565b60405180910390a25050565b60676020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff1680610c7c575060008054906101000a900460ff16155b610cbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb2906128e7565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d0b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d14826115a2565b8015610d355760008060016101000a81548160ff0219169083151502179055505b5050565b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d6761159a565b73ffffffffffffffffffffffffffffffffffffffff16610d85610ae7565b73ffffffffffffffffffffffffffffffffffffffff1614610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd29061277c565b60405180910390fd5b80606b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f3666cbc2f443a3d7b2e9eff02792c76fb2c82360f97dc5afd92b8fe46745b49083604051610ed69190612967565b60405180910390a3505050565b610eeb61159a565b73ffffffffffffffffffffffffffffffffffffffff16610f09610ae7565b73ffffffffffffffffffffffffffffffffffffffff1614610f5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f569061277c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc5906129f4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60656020528060005260406000206000915090505481565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b82606c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111959190612841565b92505081905550600033606c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405160200161126a929190612a7d565b60405160208183030381529060405280519060200120905061130d8383606b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015484611867565b611343576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036114ea57611413606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002866113cb9190612ad8565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118809092919063ffffffff16565b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a2ee25260028661145e9190612ad8565b336040518363ffffffff1660e01b815260040161147c929190612b09565b600060405180830381600087803b15801561149657600080fd5b505af11580156114aa573d6000803e3d6000fd5b505050506114e5336002866114bf9190612ad8565b8773ffffffffffffffffffffffffffffffffffffffff1661191c9092919063ffffffff16565b611516565b61151533858773ffffffffffffffffffffffffffffffffffffffff1661191c9092919063ffffffff16565b5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2422cac5e23c46c890fdcf42d0c64757409df6832174df639337558f09d99c688760405161158a919061228e565b60405180910390a4505050505050565b600033905090565b600060019054906101000a900460ff16806115c8575060008054906101000a900460ff16155b611607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fe906128e7565b60405180910390fd5b60008060019054906101000a900460ff161590508015611657576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61165f61199b565b81606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634c55b7de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561170d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117319190612b47565b606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf24eb246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118029190612b47565b606a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156118635760008060016101000a81548160ff0219169083151502179055505b5050565b600082611875868685611a84565b149050949350505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016118bd929190612b74565b602060405180830381865afa1580156118da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fe91906127b1565b9050611916848484846119119190612841565b611ad6565b50505050565b611996838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161194f929190612b9d565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611be5565b505050565b600060019054906101000a900460ff16806119c1575060008054906101000a900460ff16155b611a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f7906128e7565b60405180910390fd5b60008060019054906101000a900460ff161590508015611a50576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611a58611c7c565b611a60611d55565b8015611a815760008060016101000a81548160ff0219169083151502179055505b50565b60008082905060005b85859050811015611aca57611abb82878784818110611aaf57611aae612bc6565b5b90506020020135611ed7565b91508080600101915050611a8d565b50809150509392505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b38484604051602401611b07929190612b9d565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050611b558482611f02565b611bdf57611bd4848573ffffffffffffffffffffffffffffffffffffffff1663095ea7b3866000604051602401611b8d929190612c30565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611be5565b611bde8482611be5565b5b50505050565b6000611c10828473ffffffffffffffffffffffffffffffffffffffff16611fc990919063ffffffff16565b90506000815114158015611c35575080806020019051810190611c3391906126f2565b155b15611c7757826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401611c6e919061235b565b60405180910390fd5b505050565b600060019054906101000a900460ff1680611ca2575060008054906101000a900460ff16155b611ce1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd8906128e7565b60405180910390fd5b60008060019054906101000a900460ff161590508015611d31576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015611d525760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611d7b575060008054906101000a900460ff16155b611dba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db1906128e7565b60405180910390fd5b60008060019054906101000a900460ff161590508015611e0a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000611e1461159a565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015611ed45760008060016101000a81548160ff0219169083151502179055505b50565b6000818310611eef57611eea8284611fdf565b611efa565b611ef98383611fdf565b5b905092915050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611f2c9190612cca565b6000604051808303816000865af19150503d8060008114611f69576040519150601f19603f3d011682016040523d82523d6000602084013e611f6e565b606091505b5091509150818015611f9c5750600081511480611f9b575080806020019051810190611f9a91906126f2565b5b5b8015611fbf575060008573ffffffffffffffffffffffffffffffffffffffff163b115b9250505092915050565b6060611fd783836000611ff6565b905092915050565b600082600052816020526040600020905092915050565b60608147101561203d57306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401612034919061235b565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516120669190612cca565b60006040518083038185875af1925050503d80600081146120a3576040519150601f19603f3d011682016040523d82523d6000602084013e6120a8565b606091505b50915091506120b88683836120c3565b925050509392505050565b6060826120d8576120d382612152565b61214a565b60008251148015612100575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561214257836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401612139919061235b565b60405180910390fd5b81905061214b565b5b9392505050565b6000815111156121655780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121d6826121ab565b9050919050565b6121e6816121cb565b81146121f157600080fd5b50565b600081359050612203816121dd565b92915050565b6000819050919050565b61221c81612209565b811461222757600080fd5b50565b60008135905061223981612213565b92915050565b60008060408385031215612256576122556121a1565b5b6000612264858286016121f4565b92505060206122758582860161222a565b9150509250929050565b61228881612209565b82525050565b60006020820190506122a3600083018461227f565b92915050565b6000602082840312156122bf576122be6121a1565b5b60006122cd848285016121f4565b91505092915050565b60008115159050919050565b6122eb816122d6565b82525050565b600060208201905061230660008301846122e2565b92915050565b60008060408385031215612323576123226121a1565b5b6000612331858286016121f4565b9250506020612342858286016121f4565b9150509250929050565b612355816121cb565b82525050565b6000602082019050612370600083018461234c565b92915050565b6000612381826121cb565b9050919050565b61239181612376565b811461239c57600080fd5b50565b6000813590506123ae81612388565b92915050565b6000602082840312156123ca576123c96121a1565b5b60006123d88482850161239f565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61242f826123e6565b810181811067ffffffffffffffff8211171561244e5761244d6123f7565b5b80604052505050565b6000612461612197565b905061246d8282612426565b919050565b6000819050919050565b61248581612472565b811461249057600080fd5b50565b6000813590506124a28161247c565b92915050565b6000606082840312156124be576124bd6123e1565b5b6124c86060612457565b905060006124d884828501612493565b60008301525060206124ec8482850161222a565b60208301525060406125008482850161222a565b60408301525092915050565b600080600060a08486031215612525576125246121a1565b5b6000612533868287016121f4565b9350506020612544868287016121f4565b9250506040612555868287016124a8565b9150509250925092565b6000819050919050565b600061258461257f61257a846121ab565b61255f565b6121ab565b9050919050565b600061259682612569565b9050919050565b60006125a88261258b565b9050919050565b6125b88161259d565b82525050565b60006020820190506125d360008301846125af565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126125fe576125fd6125d9565b5b8235905067ffffffffffffffff81111561261b5761261a6125de565b5b602083019150836020820283011115612637576126366125e3565b5b9250929050565b60008060008060006080868803121561265a576126596121a1565b5b6000612668888289016121f4565b9550506020612679888289016121f4565b945050604061268a8882890161222a565b935050606086013567ffffffffffffffff8111156126ab576126aa6121a6565b5b6126b7888289016125e8565b92509250509295509295909350565b6126cf816122d6565b81146126da57600080fd5b50565b6000815190506126ec816126c6565b92915050565b600060208284031215612708576127076121a1565b5b6000612716848285016126dd565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061276660208361271f565b915061277182612730565b602082019050919050565b6000602082019050818103600083015261279581612759565b9050919050565b6000815190506127ab81612213565b92915050565b6000602082840312156127c7576127c66121a1565b5b60006127d58482850161279c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061281882612209565b915061282383612209565b925082820390508181111561283b5761283a6127de565b5b92915050565b600061284c82612209565b915061285783612209565b925082820190508082111561286f5761286e6127de565b5b92915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006128d1602e8361271f565b91506128dc82612875565b604082019050919050565b60006020820190508181036000830152612900816128c4565b9050919050565b61291081612472565b82525050565b61291f81612209565b82525050565b60608201600082015161293b6000850182612907565b50602082015161294e6020850182612916565b5060408201516129616040850182612916565b50505050565b600060608201905061297c6000830184612925565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006129de60268361271f565b91506129e982612982565b604082019050919050565b60006020820190508181036000830152612a0d816129d1565b9050919050565b60008160601b9050919050565b6000612a2c82612a14565b9050919050565b6000612a3e82612a21565b9050919050565b612a56612a51826121cb565b612a33565b82525050565b6000819050919050565b612a77612a7282612209565b612a5c565b82525050565b6000612a898285612a45565b601482019150612a998284612a66565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ae382612209565b9150612aee83612209565b925082612afe57612afd612aa9565b5b828204905092915050565b6000604082019050612b1e600083018561227f565b612b2b602083018461234c565b9392505050565b600081519050612b41816121dd565b92915050565b600060208284031215612b5d57612b5c6121a1565b5b6000612b6b84828501612b32565b91505092915050565b6000604082019050612b89600083018561234c565b612b96602083018461234c565b9392505050565b6000604082019050612bb2600083018561234c565b612bbf602083018461227f565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6000612c1a612c15612c1084612bf5565b61255f565b612209565b9050919050565b612c2a81612bff565b82525050565b6000604082019050612c45600083018561234c565b612c526020830184612c21565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015612c8d578082015181840152602081019050612c72565b60008484015250505050565b6000612ca482612c59565b612cae8185612c64565b9350612cbe818560208601612c6f565b80840191505092915050565b6000612cd68284612c99565b91508190509291505056fea2646970667358221220163a0d8d817db97c99f90a39d1543aa1f45fea5ad23be7c68085fb934b65abc864736f6c634300081b0033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 580,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 583,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 982,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3212,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "nextStrykeEpochToPull",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3218,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "epochRewards",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3222,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "gauges",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3225,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "controller",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IGaugeController)3763"
      },
      {
        "astId": 3227,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "syk",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 3229,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "xSyk",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 3003,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "merkleRootData",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(MerkleRootData)2975_storage))"
      },
      {
        "astId": 3011,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "claimed",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 3017,
        "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
        "label": "totalReward",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IGaugeController)3763": {
        "encoding": "inplace",
        "label": "contract IGaugeController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(MerkleRootData)2975_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct OrangeDistributor.MerkleRootData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(MerkleRootData)2975_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(MerkleRootData)2975_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct OrangeDistributor.MerkleRootData)",
        "numberOfBytes": "32",
        "value": "t_struct(MerkleRootData)2975_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(MerkleRootData)2975_storage": {
        "encoding": "inplace",
        "label": "struct OrangeDistributor.MerkleRootData",
        "members": [
          {
            "astId": 2970,
            "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
            "label": "root",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2972,
            "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
            "label": "distributionStartBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2974,
            "contract": "contracts/OrangeDistributor.sol:OrangeDistributor",
            "label": "distributionEndBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}